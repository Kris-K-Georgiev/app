<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;

return new class extends Migration {
    public function up(): void
    {
        // Augment users table (phone, status)
        if(Schema::hasTable('users')){
            Schema::table('users', function(Blueprint $table){
                if(!Schema::hasColumn('users','phone')){ $table->string('phone',40)->nullable()->after('email'); }
                if(!Schema::hasColumn('users','status')){ $table->enum('status',['active','inactive'])->default('active')->after('bio'); }
            });
        }

        // news table
        if(!Schema::hasTable('news')){
            Schema::create('news', function(Blueprint $table){
                $table->id();
                $table->string('title');
                $table->text('content');
                $table->string('cover')->nullable();
                $table->string('image')->nullable();
                $table->enum('status',['draft','published'])->default('published');
                $table->foreignId('created_by')->nullable()->constrained('users')->nullOnDelete();
                $table->timestamps();
                $table->index('title');
            });
        } else {
            Schema::table('news', function(Blueprint $table){
                if(!Schema::hasColumn('news','cover')) $table->string('cover')->nullable()->after('content');
                if(!Schema::hasColumn('news','image')) $table->string('image')->nullable()->after('cover');
                if(!Schema::hasColumn('news','status')) $table->enum('status',['draft','published'])->default('published')->after('image');
                if(!Schema::hasColumn('news','created_by')) $table->foreignId('created_by')->nullable()->after('status')->constrained('users')->nullOnDelete();
            });
        }

        if(!Schema::hasTable('news_images')){
            Schema::create('news_images', function(Blueprint $table){
                $table->id();
                $table->foreignId('news_id')->constrained('news')->cascadeOnDelete();
                $table->string('path');
                $table->unsignedInteger('position')->default(0);
                $table->timestamps();
                $table->index(['news_id','position']);
            });
        }

        // event_types taxonomy
        if(!Schema::hasTable('event_types')){
            Schema::create('event_types', function(Blueprint $table){
                $table->id();
                $table->string('slug')->unique();
                $table->string('name');
                $table->string('color',20)->nullable();
                $table->timestamps();
            });
        }

        // events table
        if(!Schema::hasTable('events')){
            Schema::create('events', function(Blueprint $table){
                $table->id();
                $table->string('title');
                $table->foreignId('event_type_id')->nullable()->constrained('event_types')->nullOnDelete();
                $table->text('description')->nullable();
                $table->string('cover')->nullable();
                $table->string('location')->nullable();
                $table->date('start_date');
                $table->date('end_date');
                $table->string('start_time',10)->nullable();
                $table->string('city',120)->nullable();
                $table->enum('status',['active','inactive'])->default('active');
                $table->enum('audience',['open','city','limited'])->default('open');
                $table->unsignedInteger('limit')->nullable();
                $table->unsignedInteger('registrations_count')->default(0);
                $table->json('images')->nullable();
                $table->foreignId('created_by')->nullable()->constrained('users')->nullOnDelete();
                $table->timestamps();
                $table->index('start_date');
                $table->index('city');
                $table->index('event_type_id');
            });
        } else {
            Schema::table('events', function(Blueprint $table){
                if(!Schema::hasColumn('events','event_type_id')) $table->foreignId('event_type_id')->nullable()->after('title')->constrained('event_types')->nullOnDelete();
                if(!Schema::hasColumn('events','cover')) $table->string('cover')->nullable()->after('description');
                if(!Schema::hasColumn('events','status')) $table->enum('status',['active','inactive'])->default('active')->after('city');
                if(!Schema::hasColumn('events','audience')) $table->enum('audience',['open','city','limited'])->default('open')->after('status');
                if(!Schema::hasColumn('events','limit')) $table->unsignedInteger('limit')->nullable()->after('audience');
                if(!Schema::hasColumn('events','registrations_count')) $table->unsignedInteger('registrations_count')->default(0)->after('limit');
                if(!Schema::hasColumn('events','images')) $table->json('images')->nullable()->after('registrations_count');
                if(!Schema::hasColumn('events','created_by')) $table->foreignId('created_by')->nullable()->after('images')->constrained('users')->nullOnDelete();
            });
        }

        // event_registrations
        if(!Schema::hasTable('event_registrations')){
            Schema::create('event_registrations', function(Blueprint $table){
                $table->id();
                $table->foreignId('event_id')->constrained('events')->cascadeOnDelete();
                $table->foreignId('user_id')->constrained('users')->cascadeOnDelete();
                $table->string('status',30)->default('confirmed');
                $table->timestamps();
                $table->unique(['event_id','user_id']);
                $table->index('user_id');
            });
        }

        // app_versions
        if(!Schema::hasTable('app_versions')){
            Schema::create('app_versions', function(Blueprint $table){
                $table->id();
                $table->unsignedInteger('version_code');
                $table->string('version_name',50);
                $table->text('release_notes')->nullable();
                $table->boolean('is_mandatory')->default(false);
                $table->string('download_url')->nullable();
                $table->timestamps();
                $table->index('version_code');
            });
            // seed baseline
            DB::table('app_versions')->insert([
                'version_code'=>1,
                'version_name'=>'1.0.0',
                'release_notes'=>'Initial release',
                'is_mandatory'=>false,
                'download_url'=>null,
                'created_at'=>now(),
                'updated_at'=>now(),
            ]);
        }
    }

    public function down(): void
    {
        // Note: destructive down may drop new tables only
        Schema::dropIfExists('event_registrations');
        Schema::dropIfExists('events');
        Schema::dropIfExists('event_types');
        Schema::dropIfExists('news_images');
        Schema::dropIfExists('news');
        Schema::dropIfExists('app_versions');
        // Columns removed implicitly on drop; user table augment not reverted for safety
    }
};
